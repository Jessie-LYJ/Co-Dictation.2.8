{"remainingRequest":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js?kebab!F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-1!F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\codictation.2.6\\codictation\\codictation\\codictation\\src\\views\\Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\src\\views\\Home.vue","mtime":1617708958952},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}