{"remainingRequest":"D:\\资料\\codictation.2.2\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\资料\\codictation.2.2\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js?kebab!D:\\资料\\codictation.2.2\\codictation\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-1!D:\\资料\\codictation.2.2\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\资料\\codictation.2.2\\codictation\\src\\components\\scoresStu.vue?vue&type=template&id=375f98f3&","dependencies":[{"path":"D:\\资料\\codictation.2.2\\codictation\\src\\components\\scoresStu.vue","mtime":1615203802886},{"path":"D:\\资料\\codictation.2.2\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.2\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.2\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.2\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.2\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}