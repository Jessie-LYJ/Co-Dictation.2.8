{"remainingRequest":"D:\\资料\\codictation.2.4\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\资料\\codictation.2.4\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js?kebab!D:\\资料\\codictation.2.4\\codictation\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-1!D:\\资料\\codictation.2.4\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\资料\\codictation.2.4\\codictation\\src\\components\\profile\\task.vue?vue&type=template&id=a37e3e8a&","dependencies":[{"path":"D:\\资料\\codictation.2.4\\codictation\\src\\components\\profile\\task.vue","mtime":1616066391077},{"path":"D:\\资料\\codictation.2.4\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.4\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.4\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.4\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\资料\\codictation.2.4\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}