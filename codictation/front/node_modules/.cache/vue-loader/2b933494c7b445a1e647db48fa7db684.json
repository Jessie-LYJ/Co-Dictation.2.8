{"remainingRequest":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js?kebab!F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-1!F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\codictation.2.6\\codictation\\codictation\\codictation\\src\\components\\profile\\mybadges.vue?vue&type=template&id=5eb4de92&scoped=true&","dependencies":[{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\src\\components\\profile\\mybadges.vue","mtime":1617710801974},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation.2.6\\codictation\\codictation\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgInEtcGFnZSIsCiAgICB7IHN0YXRpY0NsYXNzOiAicS1wYS1sZyIgfSwKICAgIFsKICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogInEtbXktbWQiIH0sIFtfdm0uX3YoIkRhaWx5IFN0dWR5IFBsYW4iKV0pLAogICAgICBfYygicS1zZXBhcmF0b3IiLCB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI1NSUiIH0sCiAgICAgICAgYXR0cnM6IHsgaW5zZXJ0OiAiIiB9CiAgICAgIH0pLAogICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAicS1teS1tZCIgfSwgW192bS5fdigiU2V0IGRhaWx5IHN0dWR5IHRpbWXvvJoiKV0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInEtYnRuLWdyb3VwIiwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJxLWJ0biIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAicHVycGxlLTQiLCBnbG9zc3k6ICIiLCBsYWJlbDogIjE1IG1pbnV0ZXMiIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2Vwcm8oMTUpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygicS1idG4iLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInB1cnBsZS01IiwgZ2xvc3N5OiAiIiwgbGFiZWw6ICIzMCBtaW51dGVzIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlcHJvKDMwKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoInEtYnRuIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwdXJwbGUtNiIsIGdsb3NzeTogIiIsIGxhYmVsOiAiNDUgbWludXRlcyIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZXBybyg0NSkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJxLWJ0biIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAicHVycGxlLTgiLCBnbG9zc3k6ICIiLCBsYWJlbDogIjYwIG1pbnV0ZXMiIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2Vwcm8oNjApCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJxLW15LWxnIiB9LCBbCiAgICAgICAgX3ZtLl92KCIgS2VlcCB0cmFjayBvZiB5b3VyIG1pbGVzdG9uZXM6ICIpLAogICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoX3ZtLl9zKE1hdGguZmxvb3IodGhpcy50ZXN0MSkpKV0pLAogICAgICAgICAgX3ZtLl92KCIgbWlucyAvICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoX3ZtLl9zKHRoaXMucHJvZ3Jlc3MpKV0pLAogICAgICAgICAgX3ZtLl92KCIgbWlucyIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJxLWNpcmN1bGFyLXByb2dyZXNzIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInEtbWEtbWQiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgInNob3ctdmFsdWUiOiAiIiwKICAgICAgICAgICAgdmFsdWU6IE1hdGguZmxvb3IoKHRoaXMudGVzdDEgLyB0aGlzLnByb2dyZXNzKSAqIDEwMCksCiAgICAgICAgICAgIHNpemU6ICI5MHB4IiwKICAgICAgICAgICAgdGhpY2tuZXNzOiAwLjIsCiAgICAgICAgICAgIGNvbG9yOiAicHVycGxlIiwKICAgICAgICAgICAgImNlbnRlci1jb2xvciI6ICJncmV5LTMiLAogICAgICAgICAgICAidHJhY2stY29sb3IiOiAidHJhbnNwYXJlbnQiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgIiArIF92bS5fcyhNYXRoLmZsb29yKCh0aGlzLnRlc3QxIC8gdGhpcy5wcm9ncmVzcykgKiAxMDApKSArICIlICIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5jaGVjawogICAgICAgID8gX2MoInEtYnRuIiwgewogICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInB1cnBsZSIsIGljb246ICJ0b2RheSIsIGxhYmVsOiAi5omT5Y2hIiB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uRGFrYSgpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIDogX2MoInEtYnRuIiwgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGNvbG9yOiAicHVycGxlIiwKICAgICAgICAgICAgICBpY29uOiAidG9kYXkiLAogICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLAogICAgICAgICAgICAgIGxhYmVsOiAi5omT5Y2h5oiQ5YqfIgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJhcHAiIH0gfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidnVlLWNhbGVuZGFyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInZ1ZS1jYWxlbmRhcl9fdGl0bGUiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0ubW9udGggKyAxKSArICLmnIggIiArIF92bS5fcyhfdm0ueWVhcikpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidnVlLWNhbGVuZGFyX19uYXZpZ2F0aW9uIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInByZXYiLAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlTW9udGgoLTEpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjwiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmV4dCIsCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VNb250aCgxKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCI+IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ2dWUtY2FsZW5kYXJfX3dlZWsiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInVsIiwKICAgICAgICAgICAgICBfdm0uX2woX3ZtLndlZWtEYXksIGZ1bmN0aW9uKGRheSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygibGkiLCB7IGtleTogaW5kZXggfSwgW192bS5fdihfdm0uX3MoZGF5KSldKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIDAKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInZ1ZS1jYWxlbmRhcl9fbWFpbiIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fbChfdm0uZmlyc3REYXksIGZ1bmN0aW9uKG9mZnNldCwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJsaSIsIHsga2V5OiBpbmRleCArICJBIiB9KQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLm1vbnRoRGF0ZSwgZnVuY3Rpb24oZGF0ZSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCArICJCIiwKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdG9kYXk6IF92bS5pc05vd1llYXJNb250aERheShkYXRlKSB9LAogICAgICAgICAgICAgICAgICAgICAgICB7IGRha2E6IF92bS5pc0Rha2EoZGF0ZSkgfSwKICAgICAgICAgICAgICAgICAgICAgICAgeyBvdmVyOiBfdm0uaXNCZWZvcmVUb2RheShkYXRlKSB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkYXRlIiB9LCBbX3ZtLl92KF92bS5fcyhkYXRlKSldKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLmlzRm9ybURhdGEKICAgICAgICA/IF9jKCJkaXYiLCB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjM1MCUiIH0sCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZUNoYXJ0c0NvbnRhaW5lciIgfQogICAgICAgICAgfSkKICAgICAgICA6IF92bS5fZSgpLAogICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAicS1teS1tZCIgfSwgW192bS5fdigiTXkgQmFkZ2VzIildKSwKICAgICAgX2MoInEtc2VwYXJhdG9yIiwgewogICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNTUlIiB9LAogICAgICAgIGF0dHJzOiB7IGluc2VydDogIiIgfQogICAgICB9KSwKICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInEtbXktbWQiIH0sIFtfdm0uX3YoIlBlcnNpc3RlbnQgbGVhcm5lciIpXSksCiAgICAgIF9jKCJxLXNlcGFyYXRvciIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjU1JSIgfSwKICAgICAgICBhdHRyczogeyBpbnNlcnQ6ICIiIH0KICAgICAgfSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXJfYmFkZ2UiIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl9sKF92bS5kYWthQmFkZ2VzLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogaXRlbS5uYW1lLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBpYyIsCiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGFjdGl2ZTogaXRlbS5pc2dldCB9LAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIxNXB4IiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZWwtcG9wb3ZlciIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAicmlnaHQiLAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjI1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICJob3ZlciIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZWwtY2FyZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNDBweCIsIG1hcmdpbjogIjAgYXV0byIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2JhZGdlcy8iICsgaXRlbS5waWNOYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC13ZWlnaHQiOiAiYm9sZCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdGV4dENvbnRlbnQ6IF92bS5fcyhpdGVtLm5hbWUpIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHRleHRDb250ZW50OiBfdm0uX3MoaXRlbS5pbnRybykgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdGV4dENvbnRlbnQ6IF92bS5fcyhpdGVtLmdldFRpbWUpIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInJlZmVyZW5jZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9iYWRnZXMvIiArIGl0ZW0ucGljTmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInJlZmVyZW5jZSIKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIGl0ZW0uc3RhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgID8gX2MoInAiLCBbX3ZtLl92KCJOb3QgQWNoaWV2ZWQiKV0pCiAgICAgICAgICAgICAgICAgICAgOiBpdGVtLnN0YXRlID09IDEKICAgICAgICAgICAgICAgICAgICA/IF9jKCJxLWJ0biIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiNXB4IiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAicHVycGxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIlVuTG9jayBOb3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICJzbSIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnVubG9jaygiZGFrYSIsIGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA6IF9jKCJwIiwgW192bS5fdigiQWNoaWV2ZWQiKV0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDIKICAgICAgKSwKICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInEtbXktbWQiIH0sIFtfdm0uX3YoIlNjaG9sYXIiKV0pLAogICAgICBfYygicS1zZXBhcmF0b3IiLCB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI1NSUiIH0sCiAgICAgICAgYXR0cnM6IHsgaW5zZXJ0OiAiIiB9CiAgICAgIH0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyX2JhZGdlIiB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fbChfdm0udGFza0JhZGdlcywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGl0ZW0ubmFtZSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwaWMiLAogICAgICAgICAgICAgICAgICBjbGFzczogeyBhY3RpdmU6IGl0ZW0uaXNnZXQgfSwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMTVweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImVsLXBvcG92ZXIiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDogInJpZ2h0IiwKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyNTAiLAogICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiAiaG92ZXIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImVsLWNhcmQiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTIwcHgiLCBtYXJnaW46ICIwIGF1dG8iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9iYWRnZXMvIiArIGl0ZW0ucGljTmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogImJvbGQiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHRleHRDb250ZW50OiBfdm0uX3MoaXRlbS5uYW1lKSB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB0ZXh0Q29udGVudDogX3ZtLl9zKGl0ZW0uaW50cm8pIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHRleHRDb250ZW50OiBfdm0uX3MoaXRlbS5nZXRUaW1lKSB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJyZWZlcmVuY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvYmFkZ2VzLyIgKyBpdGVtLnBpY05hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJyZWZlcmVuY2UiCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBpdGVtLnN0YXRlID09IDAKICAgICAgICAgICAgICAgICAgICA/IF9jKCJwIiwgW192bS5fdigiTm90IEFjaGlldmVkIildKQogICAgICAgICAgICAgICAgICAgIDogaXRlbS5zdGF0ZSA9PSAxCiAgICAgICAgICAgICAgICAgICAgPyBfYygicS1idG4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tdG9wIjogIjVweCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogInB1cnBsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJVbkxvY2sgTm93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAic20iCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS51bmxvY2soInRhc2siLCBpbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgOiBfYygicCIsIFtfdm0uX3YoIkFjaGlldmVkIildKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAyCiAgICAgICksCiAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJxLW15LW1kIiB9LCBbX3ZtLl92KCJQZXJmZWN0IFNjb3JlIildKSwKICAgICAgX2MoInEtc2VwYXJhdG9yIiwgewogICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNTUlIiB9LAogICAgICAgIGF0dHJzOiB7IGluc2VydDogIiIgfQogICAgICB9KSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lcl9iYWRnZSIgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX2woX3ZtLnNjb3JlQmFkZ2VzLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogaXRlbS5uYW1lLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBpYyIsCiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IGFjdGl2ZTogaXRlbS5pc2dldCB9LAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIxNXB4IiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZWwtcG9wb3ZlciIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiAicmlnaHQiLAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjI1MCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICJob3ZlciIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZWwtY2FyZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMjBweCIsIG1hcmdpbjogIjAgYXV0byIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2JhZGdlcy8iICsgaXRlbS5waWNOYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC13ZWlnaHQiOiAiYm9sZCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdGV4dENvbnRlbnQ6IF92bS5fcyhpdGVtLm5hbWUpIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHRleHRDb250ZW50OiBfdm0uX3MoaXRlbS5pbnRybykgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdGV4dENvbnRlbnQ6IF92bS5fcyhpdGVtLmdldFRpbWUpIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInJlZmVyZW5jZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9iYWRnZXMvIiArIGl0ZW0ucGljTmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInJlZmVyZW5jZSIKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIGl0ZW0uc3RhdGUgPT0gMAogICAgICAgICAgICAgICAgICAgID8gX2MoInAiLCBbX3ZtLl92KCJOb3QgQWNoaWV2ZWQiKV0pCiAgICAgICAgICAgICAgICAgICAgOiBpdGVtLnN0YXRlID09IDEKICAgICAgICAgICAgICAgICAgICA/IF9jKCJxLWJ0biIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiNXB4IiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAicHVycGxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIlVuTG9jayBOb3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICJzbSIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnVubG9jaygic2NvcmUiLCBpbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgOiBfYygicCIsIFtfdm0uX3YoIkFjaGlldmVkIildKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAyCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}