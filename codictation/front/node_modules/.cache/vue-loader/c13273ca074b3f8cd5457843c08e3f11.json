{"remainingRequest":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\src\\components\\profile\\addUsers.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\src\\components\\profile\\addUsers.vue","mtime":1615344153052},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.transform-quasar-imports.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.2\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBIZWFkZXIgZnJvbSAiLi4vYmFzaWMvSGVhZGVyLnZ1ZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYWNjb3VudExpc3Q6IFtdLAogICAgICB0YWJsZTogZmFsc2UsCiAgICAgIGNvdW50OiAwLCAvL+mYu+atouaWh+S7tuS4iuS8oOaIkOWKn+S6i+S7tuinpuWPkeeahOS6jOasoeS4iuS8oAogICAgICB0YWc6ICIiLAogICAgICB0YWdMaXN0OiBbXSwgLy/ojrflj5bor6XnlKjmiLflt7Lmt7vliqDnmoR0YWdzCiAgICAgIHRhZ0V4aXN0OiBmYWxzZSwKICAgICAgb3duZXI6ICIiLAogICAgICBzdGF0dXM6ICIiLAogICAgICBhcGk6Ii9hcGkiLAogICAgfTsKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIEhlYWRlciwKICB9LAogIG1ldGhvZHM6IHsKICAgIHNob3dUYWJsZSgpIHsKICAgICAgaWYgKHRoaXMuYWNjb3VudExpc3QubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMudGFibGUgPSAhdGhpcy50YWJsZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRub3RpZnkoewogICAgICAgICAgbWVzc2FnZTogIuW9k+WJjeacquWvvOWFpeWQjeWNleWTpiIsCiAgICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgICBwb3NpdGlvbjogImJvdHRvbS1yaWdodCIsCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBnZXRGaWxlKGV2ZW50KSB7CiAgICAgIHRoaXMuY291bnQrKzsKICAgICAgaWYgKHRoaXMuY291bnQgPT0gMSkgewogICAgICAgIGxldCBfdGhpcyA9IHRoaXM7CiAgICAgICAgbGV0IGlucHV0RE9NID0gdGhpcy4kcmVmcy5pbnB1dGVyOyAvLyDpgJrov4dET03lj5bmlofku7bmlbDmja4KICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmZpbGVzLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICB0aGlzLmZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF07CiAgICAgICAgfQogICAgICAgIHZhciByQUJTID0gZmFsc2U7IC8v5piv5ZCm5bCG5paH5Lu26K+75Y+W5Li65LqM6L+b5Yi25a2X56ym5LiyCiAgICAgICAgdmFyIGYgPSB0aGlzLmZpbGU7CiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgLy9pZiAoIUZpbGVSZWFkZXIucHJvdG90eXBlLnJlYWRBc0JpbmFyeVN0cmluZykgewogICAgICAgIEZpbGVSZWFkZXIucHJvdG90eXBlLnJlYWRBc0JpbmFyeVN0cmluZyA9IGZ1bmN0aW9uIChmKSB7CiAgICAgICAgICB2YXIgYmluYXJ5ID0gIiI7CiAgICAgICAgICB2YXIgckFCUyA9IGZhbHNlOyAvL+aYr+WQpuWwhuaWh+S7tuivu+WPluS4uuS6jOi/m+WItuWtl+espuS4sgogICAgICAgICAgdmFyIHB0ID0gdGhpczsKICAgICAgICAgIHZhciB3YjsgLy/or7vlj5blrozmiJDnmoTmlbDmja4KICAgICAgICAgIHZhciBvdXRkYXRhOwogICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocmVhZGVyLnJlc3VsdCk7CiAgICAgICAgICAgIHZhciBsZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBYTFNYID0gcmVxdWlyZSgieGxzeCIpOwogICAgICAgICAgICBpZiAockFCUykgewogICAgICAgICAgICAgIHdiID0gWExTWC5yZWFkKGJ0b2EoZml4ZGF0YShiaW5hcnkpKSwgewogICAgICAgICAgICAgICAgLy/miYvliqjovazljJYKICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNlNjQiLAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHdiID0gWExTWC5yZWFkKGJpbmFyeSwgewogICAgICAgICAgICAgICAgdHlwZTogImJpbmFyeSIsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gb3V0ZGF0YeWwseaYr+S9oOaDs+imgeeahOS4nOilvyBleGNlbOWvvOWFpeeahOaVsOaNrgogICAgICAgICAgICBvdXRkYXRhID0gWExTWC51dGlscy5zaGVldF90b19qc29uKHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzWzBdXSk7CiAgICAgICAgICAgIC8vIGV4Y2VsIOaVsOaNruWGjeWkhOeQhgogICAgICAgICAgICBsZXQgYXJyID0gW107CiAgICAgICAgICAgIG91dGRhdGEubWFwKCh2KSA9PiB7CiAgICAgICAgICAgICAgbGV0IG9iaiA9IHt9OwogICAgICAgICAgICAgIG9iai5zdHVpZCA9IHYu5a2m5Y+3OwogICAgICAgICAgICAgIG9iai5uYW1lID0gdi7lrablj7cgKyB2LuWnk+WQjTsKICAgICAgICAgICAgICBvYmouc3R1bmFtZSA9IHYu5aeT5ZCNOwogICAgICAgICAgICAgIG9iai5wYXNzd29yZCA9IHYu5a+G56CBOwogICAgICAgICAgICAgIGFyci5wdXNoKG9iaik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfdGhpcy5hY2NvdW50TGlzdCA9IFsuLi5hcnJdOwogICAgICAgICAgICB0aGlzLmFibGUgPSBmYWxzZTsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coX3RoaXMuYWNjb3VudExpc3QpOwogICAgICAgICAgICBfdGhpcy5yZWxvYWQoKTsKICAgICAgICAgIH07CiAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZik7CiAgICAgICAgfTsKICAgICAgICBpZiAockFCUykgewogICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGYpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKGYpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHN1Ym1pdExpc3QoKSB7CiAgICAgIGlmICh0aGlzLmFjY291bnRMaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLiRheGlvcwogICAgICAgICAgLnBvc3QodGhpcy5hcGkrIi9hZGRVc2VycyIsIHsKICAgICAgICAgICAgb3duZXI6IHRoaXMub3duZXIsCiAgICAgICAgICAgIHVzZXJMaXN0OiB0aGlzLmFjY291bnRMaXN0LAogICAgICAgICAgICB0YWdOYW1lOiB0aGlzLnRhZywKICAgICAgICAgIH0pCiAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCLmlbDmja7lt7LkuIrkvKAiKTsKICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgbWVzc2FnZTogIuWvvOWFpeaIkOWKn++8gSIsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJib3RvbS1yaWdodCIsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICAgIG1lc3NhZ2U6ICLlvZPliY3mnKrlr7zlhaXlkI3ljZXlk6YiLAogICAgICAgICAgdHlwZTogIndhcm5pbmciLAogICAgICAgICAgcG9zaXRpb246ICJib3R0b20tcmlnaHQiLAogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgY2hlY2tUYWcoKSB7CiAgICAgIC8v5qOA5rWL5qCH6aKY5piv5ZCm6YeN5ZCNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50YWdMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMudGFnTGlzdFtpXSA9PSB0aGlzLnRhZykgewogICAgICAgICAgdGhpcy50YWdFeGlzdCA9IHRydWU7IC8v6YeN5ZCN5YiZ5peg5rOV5o+Q5LqkCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMudGFnRXhpc3QgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBnZXRUYWdMaXN0KCkgewogICAgICAvL+i/nuaOpeaVsOaNruW6k++8jOiOt+WPluaVsOaNruW6k+S4reWxnuS6juW9k+WJjeeUqOaIt+eahHRhZ+WIl+ihqAogICAgICB0aGlzLiRheGlvcy5nZXQodGhpcy5hcGkrIi90YWdMaXN0P293bmVyPSIgKyB0aGlzLm93bmVyKS50aGVuKChyZXMpID0+IHsKICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGhpcy50YWdMaXN0LnB1c2goZGF0YVtpXS50YWdOYW1lKTsKICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2codGhpcy50YWdMaXN0KTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0U3RhdHVzKCkgewogICAgICAvL+i/nuaOpeaVsOaNruW6k++8jOiOt+WPluaVsOaNruW6k+S4reWxnuS6juW9k+WJjeeUqOaIt+eahHN0YXR1cwogICAgICB0aGlzLiRheGlvcy5nZXQodGhpcy5hcGkrIi9wcm9maWxlP25hbWU9IiArIHRoaXMub3duZXIpLnRoZW4oKHJlcykgPT4gewogICAgICAgIHRoaXMuc3RhdHVzID0gcmVzLmRhdGFbMF0uc3RhdHVzOwogICAgICB9KTsKICAgIH0sCiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5vd25lciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oInVzZXJOYW1lIik7CiAgICB0aGlzLmdldFRhZ0xpc3QoKTsKICAgIHRoaXMuZ2V0U3RhdHVzKCk7CiAgfSwKfTsK"},{"version":3,"sources":["addUsers.vue"],"names":[],"mappingsfile":"addUsers.vue","sourceRoot":"src/components/profile","sourcesContent":["<template>\n  <div class=\"q-pa-md\">\n    <p>导入学生名单</p>\n    <input type=\"file\" single accept=\".xlsx\" @change=\"getFile($event)\" />\n    <br />\n    添加名单标签：\n    <input type=\"text\" v-model=\"tag\" @keyup=\"checkTag()\" />\n    <p v-if=\"tagExist\" style=\"font-size: 80%; color: red\">\n      ×标签已存在，请重新命名\n    </p>\n    <el-button type=\"info\" @click=\"showTable()\">预览</el-button>\n    <el-button type=\"primary\" @click=\"submitList()\" :disabled=\"tagExist\"\n      >导入</el-button\n    >\n    <el-table\n      :data=\"accountList\"\n      border\n      style=\"width: 20%; margin-left: 33%; margin-top: 3%\"\n      v-if=\"table\"\n    >\n      <el-table-column prop=\"stuid\" label=\"学号\" width=\"160\"> </el-table-column>\n      <el-table-column prop=\"stuname\" label=\"姓名\"> </el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\nimport Header from \"../basic/Header.vue\";\nexport default {\n  data() {\n    return {\n      accountList: [],\n      table: false,\n      count: 0, //阻止文件上传成功事件触发的二次上传\n      tag: \"\",\n      tagList: [], //获取该用户已添加的tags\n      tagExist: false,\n      owner: \"\",\n      status: \"\",\n      api:\"/api\",\n    };\n  },\n  components: {\n    Header,\n  },\n  methods: {\n    showTable() {\n      if (this.accountList.length > 0) {\n        this.table = !this.table;\n      } else {\n        this.$notify({\n          message: \"当前未导入名单哦\",\n          type: \"warning\",\n          position: \"bottom-right\",\n        });\n      }\n    },\n    getFile(event) {\n      this.count++;\n      if (this.count == 1) {\n        let _this = this;\n        let inputDOM = this.$refs.inputer; // 通过DOM取文件数据\n        if (event.target.files.length == 1) {\n          this.file = event.target.files[0];\n        }\n        var rABS = false; //是否将文件读取为二进制字符串\n        var f = this.file;\n        var reader = new FileReader();\n        //if (!FileReader.prototype.readAsBinaryString) {\n        FileReader.prototype.readAsBinaryString = function (f) {\n          var binary = \"\";\n          var rABS = false; //是否将文件读取为二进制字符串\n          var pt = this;\n          var wb; //读取完成的数据\n          var outdata;\n          var reader = new FileReader();\n          reader.onload = function (e) {\n            var bytes = new Uint8Array(reader.result);\n            var length = bytes.byteLength;\n            for (var i = 0; i < length; i++) {\n              binary += String.fromCharCode(bytes[i]);\n            }\n            var XLSX = require(\"xlsx\");\n            if (rABS) {\n              wb = XLSX.read(btoa(fixdata(binary)), {\n                //手动转化\n                type: \"base64\",\n              });\n            } else {\n              wb = XLSX.read(binary, {\n                type: \"binary\",\n              });\n            }\n            // outdata就是你想要的东西 excel导入的数据\n            outdata = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);\n            // excel 数据再处理\n            let arr = [];\n            outdata.map((v) => {\n              let obj = {};\n              obj.stuid = v.学号;\n              obj.name = v.学号 + v.姓名;\n              obj.stuname = v.姓名;\n              obj.password = v.密码;\n              arr.push(obj);\n            });\n            _this.accountList = [...arr];\n            this.able = false;\n            // console.log(_this.accountList);\n            _this.reload();\n          };\n          reader.readAsArrayBuffer(f);\n        };\n        if (rABS) {\n          reader.readAsArrayBuffer(f);\n        } else {\n          reader.readAsBinaryString(f);\n        }\n      }\n    },\n    submitList() {\n      if (this.accountList.length > 0) {\n        this.$axios\n          .post(this.api+\"/addUsers\", {\n            owner: this.owner,\n            userList: this.accountList,\n            tagName: this.tag,\n          })\n          .then((result) => {\n            console.log(result);\n            console.log(\"数据已上传\");\n            this.$notify({\n              type: \"success\",\n              message: \"导入成功！\",\n              position: \"botom-right\",\n            });\n          });\n      } else {\n        this.$notify({\n          message: \"当前未导入名单哦\",\n          type: \"warning\",\n          position: \"bottom-right\",\n        });\n      }\n    },\n    checkTag() {\n      //检测标题是否重名\n      for (var i = 0; i < this.tagList.length; i++) {\n        if (this.tagList[i] == this.tag) {\n          this.tagExist = true; //重名则无法提交\n          return;\n        } else {\n          this.tagExist = false;\n        }\n      }\n    },\n    getTagList() {\n      //连接数据库，获取数据库中属于当前用户的tag列表\n      this.$axios.get(this.api+\"/tagList?owner=\" + this.owner).then((res) => {\n        var data = res.data;\n        for (var i = 0; i < data.length; i++) {\n          this.tagList.push(data[i].tagName);\n        }\n        console.log(this.tagList);\n      });\n    },\n    getStatus() {\n      //连接数据库，获取数据库中属于当前用户的status\n      this.$axios.get(this.api+\"/profile?name=\" + this.owner).then((res) => {\n        this.status = res.data[0].status;\n      });\n    },\n  },\n  created() {\n    this.owner = sessionStorage.getItem(\"userName\");\n    this.getTagList();\n    this.getStatus();\n  },\n};\n</script>\n\n<style>\n</style>"]}]}