{"remainingRequest":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\src\\components\\diff.vue?vue&type=template&id=67186cd6&","dependencies":[{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\src\\components\\diff.vue","mtime":1615816885558},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}