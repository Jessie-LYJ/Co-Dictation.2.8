{"remainingRequest":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js?kebab!F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-1!F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\src\\components\\basic\\Header.vue?vue&type=template&id=76a534be&","dependencies":[{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\src\\components\\basic\\Header.vue","mtime":1615775396927},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\codictation\\collection\\final project\\codictation\\codictation2.0\\codictation.2.3\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}