{"remainingRequest":"E:\\FFFF\\codictation\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\FFFF\\codictation\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js?kebab!E:\\FFFF\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-1!E:\\FFFF\\codictation\\codictation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\FFFF\\codictation\\codictation\\src\\components\\profile\\mybadges.vue?vue&type=template&id=5eb4de92&scoped=true&","dependencies":[{"path":"E:\\FFFF\\codictation\\codictation\\src\\components\\profile\\mybadges.vue","mtime":1616952099146},{"path":"E:\\FFFF\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FFFF\\codictation\\codictation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\FFFF\\codictation\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.auto-import.js","mtime":499162500000},{"path":"E:\\FFFF\\codictation\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FFFF\\codictation\\codictation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}