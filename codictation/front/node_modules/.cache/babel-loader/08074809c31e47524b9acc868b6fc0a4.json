{"remainingRequest":"D:\\project\\codictation.2.7\\codictation\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\codictation.2.7\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.transform-quasar-imports.js!D:\\project\\codictation.2.7\\codictation\\src\\diff.js","dependencies":[{"path":"D:\\project\\codictation.2.7\\codictation\\src\\diff.js","mtime":1612749277000},{"path":"D:\\project\\codictation.2.7\\codictation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\codictation.2.7\\codictation\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\project\\codictation.2.7\\codictation\\node_modules\\vue-cli-plugin-quasar\\lib\\loader.transform-quasar-imports.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:/project/codictation.2.7/codictation/src/diff.js"],"names":["exports","spaces","str","match","concat","markup","deleted","marker","start","escape","end","inserted","retrieve","obj","keys","reduce","a","x","build_word_index","words_array","i","rows","o","push","word","frequency","wordHash","connect","words","row","connectedRow","text","exists","index","connectUnchangedWords","diff","old_hash","old_words","new_hash","new_words","chainMatchingWords","forEach","newWord","length","reverse","differ","stringToWords","prepare_text","split","parse","oldString","newString","sigil","undefined","ins","del","diff_output","old_spaces","new_spaces","n","pre","replace","string","remove_extra_spaces","prepare_markdown","link_re","merge_adjacent","type","spans","$","span","nextspan","merge","follower","nextSibling","nodeName","len","data","trim","remove"],"mappings":"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","sourcesContent":[";(function (exports) {\n\n  var spaces = function(str) {\n    var spaces = str.match(/\\s+/g);\n    if (spaces == null) {\n      spaces = [];\n    }\n    return spaces.concat(\"\\n\");\n  };\n\n  var markup = {\n    deleted: function(str, marker) {\n      return marker.start + escape(str) + marker.end;\n    },\n\n    inserted: function(str, marker) {\n      return marker.start + escape(str) + marker.end;\n    }\n  };\n\n  var retrieve = function(obj, keys) {\n    return keys.reduce(function(a, x) {\n      return a && a[x];\n    }, obj);\n  };\n\n  var build_word_index = function(words_array) {\n    return words_array.reduce(function(a, x, i) {\n      a[x] = a[x] || { rows: [], o: null };\n      a[x].rows.push(i);\n      return a;\n    }, {});\n  };\n\n  var word = {\n    frequency: function(wordHash, word) {\n      return retrieve(wordHash, [word, \"rows\", \"length\"])\n    },\n\n    connect: function(words, row, connectedRow) {\n      words[row] = { text: words[row], row: connectedRow };\n    },\n\n    exists: function(words, index) {\n      return retrieve(words, [index, \"text\"]) != null;\n    }\n  };\n\n  var connectUnchangedWords = function(diff) {\n    var old_hash = build_word_index(diff.old_words);\n    var new_hash = build_word_index(diff.new_words);\n\n    // for each word in the new text\n    // when the word appears in only once in both hashes\n    // add a new object to the diff.new_words and diff.old_words\n    // arrays that contains the index of that word in the other array\n    // along with the text of the word\n    for ( var i in new_hash ) {\n      if (word.frequency(new_hash, i) === 1 && word.frequency(old_hash, i) === 1) {\n        // assume these words are unchanged matches\n        word.connect(diff.new_words, new_hash[i].rows[0], old_hash[i].rows[0]);\n        word.connect(diff.old_words, old_hash[i].rows[0], new_hash[i].rows[0]);\n      }\n    }\n  };\n\n  var chainMatchingWords = function(diff) {\n    // try to find consecutive matching words.\n    // this step is essentially trying to find\n    // the best string of matches when a word\n    // has been used more than once\n    diff.new_words.forEach(function(newWord, i) {\n      if (word.exists(diff.new_words, i)\n          && !word.exists(diff.new_words, i + 1) // and the next word is so-far unmatched\n          // and we haven't passed the end of the diff.old_words\n          && newWord.row + 1 < diff.old_words.length\n          && !word.exists(diff.old_words, newWord.row + 1)\n          // and the next word is the same in the diff.old_words\n          && diff.new_words[i + 1] == diff.old_words[ newWord.row + 1 ]) {\n        // chain current word to next in diff.new_words and diff.old_words\n        word.connect(diff.new_words, i + 1, newWord.row + 1);\n        word.connect(diff.old_words, newWord.row + 1, i + 1);\n      }\n    });\n  };\n\n  var diff =  function(old_words, new_words) {\n    var diff = {\n      old_words: old_words,\n      new_words: new_words\n    };\n\n    connectUnchangedWords(diff);\n    chainMatchingWords(diff);\n    diff.old_words.reverse();\n    diff.new_words.reverse();\n    chainMatchingWords(diff);\n    diff.old_words.reverse();\n    diff.new_words.reverse();\n    return diff;\n  };\n\n  var differ = {\n    stringToWords: function(str) {\n      str = this.prepare_text(str);\n      return str == \"\" ? [] : str.split(/\\s+/);\n    },\n\n    parse: function(oldString, newString, sigil) {\n      // set sigil defaults if not passed\n      if (sigil === undefined) {\n        sigil =\n        {\n          ins:\n          {\n            start: '<ins>',\n            end: '</ins>'\n          },\n          del:\n          {\n            start: '<del>',\n            end: '</del>'\n          },\n        };\n      }\n\n\n      // pass arrays of new and old words to diff method\n      // diff method returns output of the diff\n      var diff_output = diff(this.stringToWords(oldString), this.stringToWords(newString));\n      // console.log('=======', diff_output)\n      var str = \"\";\n\n      // find all of the spaces in the previous string\n      // so we can reassemble the words as they were\n      // (doesn't seem all the necessary for HTML)\n      var old_spaces = spaces(oldString);\n      var new_spaces = spaces(newString);\n\n      // if the newString was empty,\n      // strike out everything from the oldString\n      if (diff_output.new_words.length == 0) { // why is there a special case for length 0?\n        for (var i = 0; i < diff_output.old_words.length; i++) {\n          str += markup.deleted((diff_output.old_words[i]), sigil.del) + old_spaces[i];\n        }\n      }\n      // assemble the diffed string by stitching together\n        // the oldString and the newString.\n      else {\n        // for all old_words that were deleted\n        // (indicated by a lack of an object at this index)\n        // this loop stops as soon as an old word matches with\n        // the new string (essentially just creating the deleted strings\n        // at the beginning of the diff)\n        for (n = 0;\n             n < diff_output.old_words.length\n             && diff_output.old_words[n].text == null;\n             n++)\n        {\n          // surround those words w/delete indicators/tags and\n          // add back its spaces\n\n          str += markup.deleted((diff_output.old_words[n]) + old_spaces[n], sigil.del);\n        }\n\n        // for all words in the newString\n        for ( var i = 0; i < diff_output.new_words.length; i++ ) {\n          // if the word did not match any in the oldString\n          if (diff_output.new_words[i].text == null) {\n            // surround the word w/insert indicators/tags\n            // and add back its spaces\n            str += markup.inserted((diff_output.new_words[i]), sigil.ins) + new_spaces[i];\n          }\n          // if the word did match with the oldString\n          else {\n            var pre = \"\";\n\n            for (\n                  n = diff_output.new_words[i].row + 1;\n                  n < diff_output.old_words.length\n                  && diff_output.old_words[n].text == null;\n                  n++\n                )\n            {\n\n              pre += markup.deleted((diff_output.old_words[n]), sigil.del) + old_spaces[n];\n            }\n            str += diff_output.new_words[i].text + new_spaces[i] + pre;\n          }\n        }\n      }\n\n      str = str.replace(/\\$spacebar\\$/g, ' ')\n\n      // this.merge_adjacent('del')\n      // this.merge_adjacent('ins')\n      return str;\n    },\n\n    prepare_text: function(string) {\n      string = this.remove_extra_spaces(string);\n      string = this.prepare_markdown(string);\n      return string;\n    },\n\n    remove_extra_spaces: function(string) {\n      // replace extra end-of-line spaces\n      return string.replace(/\\s+$/, '');\n    },\n\n    prepare_markdown: function(string) {\n      // we don't want to split up markup-style links\n      // so we're replacing spaces\n      var link_re = /\\s(?=[^\\[]*\\])/g;\n      return string.replace(link_re, '$spacebar$');\n    },\n\n\n    merge_adjacent: function(type) {\n      var spans = $(type);\n      for ( var i = spans.length - 2; i >= 0; --i)\n      {\n         var span = spans[i];\n         var nextspan = spans[i + 1];\n\n         merge(span, nextspan);\n      }\n    },\n\n    merge: function(span, nextspan) {\n      var follower = span.nextSibling;\n      var concat = true;\n       while (follower && follower != nextspan)\n       {\n         if (follower.nodeName != '#text')\n         {\n           concat = false;\n           break;\n         }\n         var len = follower.data.trim().length;\n         if (len > 0)\n         {\n           concat = false;\n           break;\n         }\n\n         follower = follower.nextSibling;\n       }\n\n      if (concat)\n      {\n        $(span).text($(span).text() + \" \" + $(follower).text());\n        $(follower).remove();\n      }\n    }\n  }\n\n\n\n\n  exports.differ = differ\n\n}(typeof exports === 'undefined' ? this : exports));\n"]}]}